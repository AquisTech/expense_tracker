- unique_id = SecureRandom.uuid
= form_with(model: transaction, remote: true, class: [unique_id, "#{'custom_transfer' unless transaction.transaction_purpose}"]) do |f|
  .grid-x
    .card.shadow
      .card-divider
        .grid-x.grid-padding-x
          .medium-6.large-4.cell
            = f.hidden_field :unique_id, value: unique_id, class: :unique_id
            - if transaction.transaction_purpose.present?
              %label= transaction.transaction_purpose.name
              = f.hidden_field :transaction_purpose_id, value: transaction.transaction_purpose_id
            - else
              = f.select :transaction_purpose_id, current_user.transaction_purposes.map { |tp| [tp.name, tp.id, { transfer: tp.transfer? }] }, {}, class: :transaction_purpose_select
              .help-text
                = link_to_reveal 'Add New Transaction Purpose', new_transaction_purpose_path, 'float-right'
            = f.hidden_field :transacted_at, value: transacted_at
          .medium-6.large-4.cell
            %label
              = f.amount_field :amount, id: :transaction_amount, currency: '&#8377;'
          .medium-6.large-4.cell
            %label
              = f.text_field :description, id: :transaction_description, placeholder: :description
      %ul.accordion{ 'data-accordion': '', 'data-allow-all-closed': 'true' }
        %li.accordion-item{ 'data-accordion-item': '' }
          = link_to 'Change preferred payments details', '#', class: 'accordion-title'
          .accordion-content.padding-0{ 'data-tab-content': '' }
            .card-section
              .grid-x.grid-padding-x
                .medium-6.large-4.cell
                  = f.select :source_account_id, current_user.accounts.map { |a| [a.name, a.id, { payment_modes: a.payment_modes }] }, {include_blank: 'Select Source Account', selected: (transaction.new_record? ? transaction.transaction_purpose.try(:preferred_account_id) : transaction.source_account_id)}
                .medium-6.large-4.cell
                  = f.collection_select :payment_mode, Payment::PAYMENT_MODES, :first, :last, {selected: f.object.payment_mode, include_blank: 'Select Payment Mode', selected: (transaction.new_record? ? transaction.transaction_purpose.try(:preferred_payment_mode) : f.object.payment_mode)}, class: :payment_mode_select
                .medium-6.large-4.cell
                  = f.select :destination_account_id, current_user.accounts.map { |a| [a.name, a.id, { payment_modes: a.payment_modes }] }, {include_blank: 'Select Destination Account', selected: (transaction.new_record? ? nil : transaction.destination_account_id)}, class: :bank_account_select # TODO : Preferred destination account in transaction purpose
                .medium-6.large-4.cell
                  = f.submit 'Save Transaction', class: 'button success'