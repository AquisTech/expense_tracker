= form_with(model: object, remote: true) do |f|
  - if object.errors.any?
    #error_explanation
      %p= "#{pluralize(object.errors.count, "error")} prohibited this transaction_purpose from being saved:"
      %ul
        - object.errors.full_messages.each do |message|
          %li= message
  .row
    = f.label :name
    = f.text_field :name, id: :transaction_purpose_name
  .row
    = f.check_box :transfer
    = f.label :transfer?
    %span.credit_debit_toggle
      = f.radio_button :credit, true
      = f.label :credit
      = f.radio_button :credit, false
      = f.label :debit
  .row
    = f.label :sub_category_id
    = f.collection_select :sub_category_id, SubCategory.includes(:category).all, :id, :name_with_category, id: :transaction_purpose_sub_category_id
  .row
    = f.label :estimate
    = f.amount_field :estimate, id: :transaction_purpose_estimate, currency: '&#8377;'
  .row
    = f.label :preferred_payment_mode
    = f.collection_select :preferred_payment_mode, Payment::PAYMENT_MODES, :first, :last, {include_blank: 'Select Payment Mode'}, class: :payment_mode_select
  .row
    = f.label :preferred_account
    = f.select :preferred_account_id, current_user.accounts.map { |a| [a.name, a.id, { payment_modes: a.payment_modes }] }, {include_blank: 'Select Bank Account'}, class: :bank_account_select
  .row.destination_account
    = f.label 'Preferred Destination Account'
    = f.select :preferred_dest_account_id, current_user.accounts.map { |a| [a.name, a.id, { payment_modes: a.payment_modes }] }, {include_blank: 'Select Bank Account'}, class: :bank_account_select
  .row.recurrence_rule_form
    = render 'recurrence_rule_form', f: f
  = render 'shared/timestamps', f: f
  = render 'shared/reveal_footer', f: f
:javascript
  toggleFormFieldsOnTransferToggle();