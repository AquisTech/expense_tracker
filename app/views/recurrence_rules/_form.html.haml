= form_with(model: object, remote: true) do |f|
  - if object.errors.any?
    #error_explanation
      %p= "#{pluralize(object.errors.count, "error")} prohibited this recurrence_rule from being saved:"
      %ul
        - object.errors.full_messages.each do |message|
          %li= message
  .row
    = f.label :type
    .input-group
      %label.input-group-label Repeat
      = f.select :type, RecurrenceRule::TYPES, {}, {class: 'input-group-field', id: :recurrence_rule_type}
  .row
    = f.label :interval
    #interval
      .input-group
        %label.input-group-label Every
        = f.number_field :interval, value: f.object.interval || 1, min: 1, class: 'input-group-field'
        %label#interval-unit.input-group-label= "#{f.object.new_record? ? 'day' : {Daily: 'day', Weekly: 'week', Monthly: 'month', Yearly: 'year'}[f.object.type.to_sym]}(s)"

  .row
    = f.label :starts_on
    .input-group
      = f.datetime_select :starts_on, {order: [:day, :month, :year], date_separator: ' / ', selected: f.object.starts_on || DateTime.now}, id: :recurrence_rule_starts_on, class: 'input-group-field small-2'
  .row
    = f.label :ends_on
    .input-group
      = f.datetime_select :ends_on, {order: [:day, :month, :year], date_separator: ' / ', include_blank: true, selected: f.object.ends_on}, id: :recurrence_rule_ends_on, class: 'input-group-field small-2'
  .row
    = f.label :count
    = f.number_field :count, value: f.object.count || 1, min: 1, id: :recurrence_rule_count
  .row
    = f.label :rules
    = f.text_area :rules, id: :recurrence_rule_rules
  .row
    = f.label :transaction_purpose_id
    = f.collection_select :transaction_purpose_id, TransactionPurpose.all, :id, :name, id: :recurrence_rule_transaction_purpose_id
  = render 'shared/timestamps', f: f
  = render 'shared/reveal_footer', f: f