= form_with(model: object, remote: true) do |f|
  - if object.errors.any?
    #error_explanation
      %p= "#{pluralize(object.errors.count, "error")} prohibited this occurrence from being saved:"
      %ul
        - object.errors.full_messages.each do |message|
          %li= message
  .row
    = f.label :recurrence_type
    = f.select :recurrence_type, RecurrenceRule::TYPES, id: :occurrence_recurrence_type
  .row
    = f.label :interval
    = f.number_field :interval, min: 1, id: :occurrence_interval
  .row
    = f.label :days
    = f.number_field :days, min: -1, id: :occurrence_days
  .row
    = f.label :weeks
    = f.select :weeks, [[nil, nil], [1, 1], [2, 2], [3, 3], [4, 4], ['Last', -1]], id: :occurrence_weeks
  .row
    = f.label :months
    = select_month object.new_record? ? Date.today : object.months, prefix: :occurrence, prompt: 'None'
  .row
    = f.label :starts_on
    .input-group
      = f.datetime_select :starts_on, {order: [:day, :month, :year], date_separator: ' / ', selected: f.object.starts_on || DateTime.now}, id: :occurrence_starts_on, class: 'input-group-field small-2'
  .row
    = f.label :ends_on
    .input-group
      = f.datetime_select :ends_on, {order: [:day, :month, :year], date_separator: ' / ', include_blank: true, selected: f.object.ends_on}, id: :occurrence_ends_on, class: 'input-group-field small-2'
  .row
    = f.label :count
    = f.number_field :count, id: :occurrence_count
  .row
    = f.label :recurrence_rule_id
    = f.collection_select :recurrence_rule_id, RecurrenceRule.all, :id, :humanize, id: :occurrence_recurrence_rule_id
  = render 'shared/timestamps', f: f
  .row
    = f.submit object.new_record? ? 'Create' : 'Update', class: 'button success'
    = link_to 'Back', occurrences_path, class: 'button warning'
