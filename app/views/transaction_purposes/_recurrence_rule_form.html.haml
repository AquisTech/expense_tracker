= f.fields :recurrence_rule do |rr|
  = rr.label :recurrence
  .input-group
    %label.input-group-label Repeat
    = rr.select :type, RecurrenceRule::TYPES, {}, {class: 'input-group-field', id: :recurrence_rule_type}

  #interval
    .input-group
      %label.input-group-label Every
      = rr.number_field :interval, value: rr.object.interval || 1, min: 1, class: 'input-group-field'
      %label#interval-unit.input-group-label= "#{rr.object.new_record? ? 'day' : {Daily: 'day', Weekly: 'week', Monthly: 'month', Yearly: 'year'}[rr.object.type.to_sym]}(s)"

  - disable_weekly_inputs = !rr.object.weekly?
  #weekly{ class: hide_if(disable_weekly_inputs) }
    .fieldset
      = rr.collection_check_boxes :rules, Date::ABBR_DAYNAMES.map.with_index.to_h, :last, :first, { checked: rr.object.rules, include_hidden: false }, disabled: disable_weekly_inputs

  #monthly{ class: hide_if(!rr.object.monthly?) }
    .fieldset
      = radio_button_tag :day_of_month_or_week_monthly, :day_of_month, !rr.object.monthly_days_of_week?
      %label Day of Month
      = radio_button_tag :day_of_month_or_week_monthly, :day_of_week, rr.object.monthly_days_of_week?
      %label Day of Week

      - disable_dom_monthly = !!rr.object.monthly_days_of_week?
      .day_of_month.input-group{ class: hide_if(disable_dom_monthly) }
        - ((1..31).to_a << -1).in_groups_of(7).map do |days_of_week|
          .row.columns
            = rr.collection_check_boxes :rules, days_of_week.compact, :to_s, :to_s, { checked: rr.object.rules, include_hidden: false }, disabled: disable_dom_monthly do |day|
              %div= day.check_box + (day.value == '-1' ? day.label { 'Last day of month' } : day.label)

      - disable_dow_monthly = !rr.object.monthly_days_of_week?
      .day_of_week.input-group{ class: hide_if(disable_dow_monthly) }
        = rr.fields :rules do |r|
          .row.columns
            - [1, 2, 3, 4, -1].each do |n|
              %div
                %label= (n == -1 ? 'Last' : n.ordinalize) + ' Week'
          - (0..6).to_a.each do |day|
            .row.columns
              = r.collection_check_boxes day.to_s, [1, 2, 3, 4, -1], :to_s, :to_s, { checked: !rr.object.rules.is_a?(Array) && rr.object.rules.try(:[], day.to_s), include_hidden: false }, disabled: disable_dow_monthly do |week|
                %div= week.check_box + week.label { Date::ABBR_DAYNAMES[day] }

  #yearly{ class: hide_if(!rr.object.yearly?) }
    %fieldset.fieldset
      = radio_button_tag :day_of_month_or_week_yearly, :day_of_month, !rr.object.yearly_days_of_week?
      %label Day of Month
      = radio_button_tag :day_of_month_or_week_yearly, :day_of_week, rr.object.yearly_days_of_week?
      %label Day of Week
      - (1..12).to_a.each do |month|
        .month{ class: [month, hide_if(month != 1)] }
          .input-group
            %label.input-group-label.prev-month{ month: month - 1, disabled: month == 1 } < Previous Month
            %label.input-group-label= Date::MONTHNAMES[month]
            %label.input-group-label.next-month{ month: month + 1, disabled: month == 12 } Next Month >

          - disable_dom_yearly = !!rr.object.yearly_days_of_week?
          .day_of_month.input-group{ class: hide_if(disable_dom_yearly) }
            = rr.fields :rules do |r|
              - ((1..31).to_a << -1).in_groups_of(7).map do |days_of_week|
                .row.columns
                  = r.collection_check_boxes month, days_of_week.compact, :to_s, :to_s, { checked: rr.object.rules.is_a?(Hash) && rr.object.rules.try(:[], month.to_s), include_hidden: false }, disabled: disable_dom_yearly do |day|
                    %div= day.check_box + (day.value == '-1' ? day.label { 'Last day of month' } : day.label)

          - disable_dow_yearly = !rr.object.yearly_days_of_week?
          .day_of_week.input-group{ class: hide_if(disable_dow_yearly) }

            = rr.fields :rules do |r|
              = r.fields month.to_s do |m|
                .row.columns
                  - [1, 2, 3, 4, -1].each do |n|
                    %div
                      %label= (n == -1 ? 'Last' : n.ordinalize) + ' Week'
                - (0..6).to_a.each do |day|
                  .row.columns
                    = m.collection_check_boxes day.to_s, [1, 2, 3, 4, -1], :to_s, :to_s, { checked: rr.object.rules.is_a?(Hash) && rr.object.rules.try(:[], month.to_s).is_a?(Hash) && rr.object.rules.try(:[], month.to_s).try(:[], day.to_s), include_hidden: false }, disabled: disable_dow_yearly do |week|
                      %div= week.check_box + week.label { Date::ABBR_DAYNAMES[day] }

  %fieldset.fieldset
    %legend Limit by
    = rr.label :starts_on
    .input-group
      = rr.datetime_select :starts_on, {order: [:day, :month, :year], date_separator: ' / ', selected: rr.object.starts_on || DateTime.now}, id: :transaction_purpose_starts_on, class: 'input-group-field small-2'

    = radio_button_tag :duration_or_count, :forever, rr.object.new_record? || rr.object.duration_bound?
    %label Repeat forever
    = radio_button_tag :duration_or_count, :duration, rr.object.persisted? && rr.object.ends_on?
    %label Limit by end date
    = radio_button_tag :duration_or_count, :count, rr.object.persisted? && rr.object.count_bound?
    %label Limit by occurrences

    #duration{ class: hide_if(rr.object.new_record? || !rr.object.ends_on?) }
      = rr.label :ends_on
      .input-group
        = rr.datetime_select :ends_on, {order: [:day, :month, :year], date_separator: ' / ', selected: rr.object.ends_on || DateTime.now}, id: :transaction_purpose_ends_on, class: 'input-group-field small-2', disabled: rr.object.new_record? || !rr.object.ends_on?

    #count{ class: hide_if(rr.object.new_record? || !rr.object.count_bound?) }
      = rr.label :count
      = rr.number_field :count, value: rr.object.count || 1, min: 1, disabled: rr.object.new_record? || !rr.object.count_bound?

  %fieldset.fieldset
    %legend Rules summary
    %label.rules_text= f.object.humanize
